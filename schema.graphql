type ReferralStatus @entity(immutable: false) {
  id: Bytes!
  totalUsers: Int!
  totalGroups: Int!
  globalBoost: BigInt!
}

type GroupSingleSidedPool @entity(immutable: false) {
  id: Bytes!
  group: ReferralGroup!
  poolAddress: Bytes!
  totalShares: BigInt!
  totalUnmintedShares: BigInt!
  accumulateEigenLayerPoints: BigInt!
  accumulateEigenpiePoints: BigInt!
  accEigenLayerPointPerShare: BigInt!
  accEigenpiePointPerShare: BigInt!
  lastUpdateTimestamp: BigInt!
}

type SingleSidedPool @entity(immutable: false) {
  id: Bytes!
  groupSingleSidedPools: [GroupSingleSidedPool!]!
  depositToken: Bytes!
  totalShares: BigInt!
  eigenpiePointsPerSec: BigInt!
  exchangeRateToETH: BigInt!
}

type GroupDexPool @entity(immutable: false) {
  id: Bytes! # hash(group, lp address)
  group: ReferralGroup!
  poolAddress: Bytes!
  totalShares: BigInt!
  accumulateEigenLayerPoints: BigInt!
  accumulateEigenpiePoints: BigInt!
  accEigenLayerPointPerShare: BigInt!
  accEigenpiePointPerShare: BigInt!
  lastUpdateTimestamp: BigInt!
}

type DexPool @entity(immutable: false) {
  id: Bytes!
  groupDexPools: [GroupDexPool!]!
  token0: Bytes!
  token1: Bytes!
  amount0: BigInt!
  amount1: BigInt!
  totalShares: BigInt!
  eigenpiePointsPerSec: BigInt!
}

type AssetPrice @entity(immutable: false) {
  id: Bytes!
  exchangeRateToETH: BigInt!
  exchangeRateToLST: BigInt!
}

type UserData @entity {
  id: Bytes!
  referrer: Bytes!
  referralGroup: ReferralGroup!
  referralCount: Int!
  referralEigenpiePoints: BigInt!
  mLrtPools: [UserPoolDepositData!]! @derivedFrom(field: "user")
  userGroupDexPools: [UserGroupDexPool!]! @derivedFrom(field: "user")
  userGroupSingleSidedPools: [UserGroupSingleSidedPool!]! @derivedFrom(field: "user")
  # rangePools
}

type UserPoolDepositData @entity {
  id: Bytes!
  user: UserData!
  mlrt: TrackedMLRT!
  mlrtAmount: BigInt!
  unmintedMlrt: BigInt!
  eigenLayerPoints: BigInt!
  eigenpiePoints: BigInt!
  eigenLayerPointsDebt: BigInt!
  eigenpiePointsDebt: BigInt!
}

type UserGroupDexPool @entity {
  id: Bytes!
  user: UserData!
  group: ReferralGroup!
  poolAddress: Bytes!
  shares: BigInt!
  eigenLayerPoints: BigInt!
  eigenpiePoints: BigInt!
  eigenLayerPointsDebt: BigInt!
  eigenpiePointsDebt: BigInt!
}

type UserGroupSingleSidedPool @entity {
  id: Bytes!
  user: UserData!
  poolAddress: TrackedMLRT!
  group: ReferralGroup!
  shares: BigInt!
  unmintedShares: BigInt!
  eigenLayerPoints: BigInt!
  eigenpiePoints: BigInt!
  eigenLayerPointsDebt: BigInt!
  eigenpiePointsDebt: BigInt!
}

type ReferralGroup @entity {
  id: Bytes!
  members: [UserData!]! @derivedFrom(field: "referralGroup")
  groupTVL: BigInt!
  groupBoost: BigInt!
}

type TrackedMLRT @entity(immutable: true) {
  id: Bytes!
  underlying: Bytes!
  strategy: Bytes!
  addedTimestamp: BigInt!
}


type PoolInfo @entity(immutable: false) {
  id: Bytes! # hash(group, lpToken)
  group: Bytes!
  lpToken: LpInfo!
  totalShares: BigInt!
  totalUnclaimedShares: BigInt!
  accEigenLayerPointPerShare: BigInt!
  accEigenpiePointPerShare: BigInt!
  lastRewardTimestamp: BigInt!
}

type UserBalanceInfo @entity {
  id: Bytes! # hash(group, lpToken, user)
  group: Bytes!
  lpToken: Bytes!
  user: UserInfo!
  shares: BigInt!
  unclaimedShares: BigInt!
  eigenLayerPointsDebt: BigInt!
  eigenpiePointsDebt: BigInt!
}

type LpInfo @entity(immutable: false) {
  id: Bytes! # hash(lpToken)
  lpToken: Bytes!
  eigenLayerPointsPerSec: BigInt!
  eigenpiePointsPerSec: BigInt!
  pools: [PoolInfo!]! @derivedFrom(field: "lpToken")
  priceToETH: BigInt!
  mLrtRatio: BigInt!
}

type UserInfo @entity(immutable: false) {
  id: Bytes! # hash(user)
  user: Bytes!
  group: GroupInfo!
  userBalances: [UserBalanceInfo!]! @derivedFrom(field: "user")
  referrer: Bytes!
  referralCount: BigInt!
  eigenLayerPoints: BigInt!
  eigenpiePoints: BigInt!
  eigenpieReferralPoints: BigInt!
}

type GroupInfo @entity(immutable: false) {
  id: Bytes! # hash(group)
  group: Bytes!
  groupBoost: BigInt!
  members: [UserInfo!]! @derivedFrom(field: "group")
  totalTvl: BigInt!
}

type GlobalInfo @entity(immutable: false) {
  id: Bytes! # hash(bytes zero)
  globalBoost: BigInt!
}